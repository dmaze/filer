#@ load("@ytt:data", "data")

#@ if data.values.prometheus.enabled:
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/component: prometheus
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: prometheus
  serviceName: prometheus-headless
  replicas: #@ data.values.prometheus.replicas
  template:
    metadata:
      labels:
        app.kubernetes.io/component: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --web.console.libraries=/usr/share/prometheus/console_libraries
            - --web.console.templates=/usr/share/prometheus/consoles
            - #@ "--web.external-url=" + data.values.ingress.scheme + "://" + data.values.ingress.hostName + ":" + str(data.values.ingress.port) + "/prometheus/"
          volumeMounts:
            - name: data
              mountPath: /prometheus
            - name: config
              mountPath: /etc/prometheus
          ports:
            - name: http
              containerPort: 9090
      volumes:
        - name: config
          configMap:
            name: prometheus
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: #@ data.values.prometheus.capacity
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-headless
  labels:
    app.kubernetes.io/component: prometheus
spec:
  selector:
    app.kubernetes.io/component: prometheus
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: http
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/component: prometheus
spec:
  selector:
    app.kubernetes.io/component: prometheus
  ports:
    - name: http
      port: 80
      targetPort: http
#@ end